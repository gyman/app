<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the private 'form.registry' shared service.

return $this->services['form.registry'] = new \Symfony\Component\Form\FormRegistry(array(0 => new \Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension(new \Symfony\Component\DependencyInjection\ServiceLocator(array('Dende\\CalendarBundle\\Form\\Type\\CreateEventType' => function () {
    return ${($_ = isset($this->services['dende_calendar.form_type.create_event']) ? $this->services['dende_calendar.form_type.create_event'] : $this->services['dende_calendar.form_type.create_event'] = new \Dende\CalendarBundle\Form\Type\CreateEventType()) && false ?: '_'};
}, 'Dende\\CalendarBundle\\Form\\Type\\UpdateEventType' => function () {
    return ${($_ = isset($this->services['dende_calendar.form_type.update_event']) ? $this->services['dende_calendar.form_type.update_event'] : $this->services['dende_calendar.form_type.update_event'] = new \Dende\CalendarBundle\Form\Type\UpdateEventType()) && false ?: '_'};
}, 'Dende\\CalendarBundle\\Form\\Type\\UpdateEventType\\RangeDatesType' => function () {
    return ${($_ = isset($this->services['dende_calendar.form_type.range_dates']) ? $this->services['dende_calendar.form_type.range_dates'] : $this->services['dende_calendar.form_type.range_dates'] = new \Dende\CalendarBundle\Form\Type\UpdateEventType\RangeDatesType()) && false ?: '_'};
}, 'FOS\\UserBundle\\Form\\Type\\ChangePasswordFormType' => function () {
    return ${($_ = isset($this->services['fos_user.change_password.form.type']) ? $this->services['fos_user.change_password.form.type'] : $this->services['fos_user.change_password.form.type'] = new \FOS\UserBundle\Form\Type\ChangePasswordFormType('Gyman\\Domain\\User')) && false ?: '_'};
}, 'FOS\\UserBundle\\Form\\Type\\GroupFormType' => function () {
    return ${($_ = isset($this->services['fos_user.group.form.type']) ? $this->services['fos_user.group.form.type'] : $this->services['fos_user.group.form.type'] = new \FOS\UserBundle\Form\Type\GroupFormType('Gyman\\Bundle\\ClubBundle\\Entity\\Group')) && false ?: '_'};
}, 'FOS\\UserBundle\\Form\\Type\\ProfileFormType' => function () {
    return ${($_ = isset($this->services['fos_user.profile.form.type']) ? $this->services['fos_user.profile.form.type'] : $this->services['fos_user.profile.form.type'] = new \FOS\UserBundle\Form\Type\ProfileFormType('Gyman\\Domain\\User')) && false ?: '_'};
}, 'FOS\\UserBundle\\Form\\Type\\RegistrationFormType' => function () {
    return ${($_ = isset($this->services['fos_user.registration.form.type']) ? $this->services['fos_user.registration.form.type'] : $this->services['fos_user.registration.form.type'] = new \FOS\UserBundle\Form\Type\RegistrationFormType('Gyman\\Domain\\User')) && false ?: '_'};
}, 'FOS\\UserBundle\\Form\\Type\\ResettingFormType' => function () {
    return ${($_ = isset($this->services['fos_user.resetting.form.type']) ? $this->services['fos_user.resetting.form.type'] : $this->services['fos_user.resetting.form.type'] = new \FOS\UserBundle\Form\Type\ResettingFormType('Gyman\\Domain\\User')) && false ?: '_'};
}, 'FOS\\UserBundle\\Form\\Type\\UsernameFormType' => function () {
    return ${($_ = isset($this->services['fos_user.username_form_type']) ? $this->services['fos_user.username_form_type'] : $this->load(__DIR__.'/getFosUser_UsernameFormTypeService.php')) && false ?: '_'};
}, 'Gyman\\Bundle\\AccountBundle\\Form\\Type\\RegisterType' => function () {
    return ${($_ = isset($this->services['account_bundle.registration.form.type']) ? $this->services['account_bundle.registration.form.type'] : $this->services['account_bundle.registration.form.type'] = new \Gyman\Bundle\AccountBundle\Form\Type\RegisterType('Gyman\\Domain\\User')) && false ?: '_'};
}, 'Gyman\\Bundle\\AccountBundle\\Form\\Type\\UserType' => function () {
    return ${($_ = isset($this->services['account_bundle.profile.edit_type']) ? $this->services['account_bundle.profile.edit_type'] : $this->services['account_bundle.profile.edit_type'] = new \Gyman\Bundle\AccountBundle\Form\Type\UserType()) && false ?: '_'};
}, 'Gyman\\Bundle\\AppBundle\\Form\\EntryType' => function () {
    return ${($_ = isset($this->services['gyman.entries.entry_form_type']) ? $this->services['gyman.entries.entry_form_type'] : $this->load(__DIR__.'/getGyman_Entries_EntryFormTypeService.php')) && false ?: '_'};
}, 'Gyman\\Bundle\\AppBundle\\Form\\MemberType' => function () {
    return ${($_ = isset($this->services['gyman.members.member_form_type']) ? $this->services['gyman.members.member_form_type'] : $this->services['gyman.members.member_form_type'] = new \Gyman\Bundle\AppBundle\Form\MemberType()) && false ?: '_'};
}, 'Gyman\\Bundle\\AppBundle\\Form\\Rest\\EntryType' => function () {
    return ${($_ = isset($this->services['gyman.rest.entries.entry_form_type']) ? $this->services['gyman.rest.entries.entry_form_type'] : $this->services['gyman.rest.entries.entry_form_type'] = new \Gyman\Bundle\AppBundle\Form\Rest\EntryType()) && false ?: '_'};
}, 'Gyman\\Bundle\\AppBundle\\Form\\SearchType' => function () {
    return ${($_ = isset($this->services['gyman.members.member_search_form_type']) ? $this->services['gyman.members.member_search_form_type'] : $this->services['gyman.members.member_search_form_type'] = new \Gyman\Bundle\AppBundle\Form\SearchType()) && false ?: '_'};
}, 'Gyman\\Bundle\\AppBundle\\Form\\UpdateVoucherType' => function () {
    return ${($_ = isset($this->services['gyman.vouchers.form.voucher_update']) ? $this->services['gyman.vouchers.form.voucher_update'] : $this->load(__DIR__.'/getGyman_Vouchers_Form_VoucherUpdateService.php')) && false ?: '_'};
}, 'Gyman\\Bundle\\AppBundle\\Form\\VoucherType' => function () {
    return ${($_ = isset($this->services['gyman.vouchers.form.voucher']) ? $this->services['gyman.vouchers.form.voucher'] : $this->load(__DIR__.'/getGyman_Vouchers_Form_VoucherService.php')) && false ?: '_'};
}, 'Gyman\\Bundle\\LandingPageBundle\\Form\\CreateClubType' => function () {
    return ${($_ = isset($this->services['gyman.landing.form.registration']) ? $this->services['gyman.landing.form.registration'] : $this->services['gyman.landing.form.registration'] = new \Gyman\Bundle\LandingPageBundle\Form\CreateClubType()) && false ?: '_'};
}, 'Gyman\\Bundle\\ReportsBundle\\Form\\Type\\DateFilterType' => function () {
    return ${($_ = isset($this->services['gyman.reports.filter_date']) ? $this->services['gyman.reports.filter_date'] : $this->load(__DIR__.'/getGyman_Reports_FilterDateService.php')) && false ?: '_'};
}, 'Gyman\\Bundle\\SettingsBundle\\Form\\Type\\ClubDetailsType' => function () {
    return ${($_ = isset($this->services['gyman.settings.club_details_type']) ? $this->services['gyman.settings.club_details_type'] : $this->services['gyman.settings.club_details_type'] = new \Gyman\Bundle\SettingsBundle\Form\Type\ClubDetailsType()) && false ?: '_'};
}, 'Gyman\\Bundle\\SettingsBundle\\Form\\Type\\SectionsType' => function () {
    return ${($_ = isset($this->services['gyman.settings.sections_type']) ? $this->services['gyman.settings.sections_type'] : $this->services['gyman.settings.sections_type'] = new \Gyman\Bundle\SettingsBundle\Form\Type\SectionsType()) && false ?: '_'};
}, 'Gyman\\Bundle\\SettingsBundle\\Form\\Type\\SettingsType' => function () {
    return ${($_ = isset($this->services['gyman.settings.club_settings_type']) ? $this->services['gyman.settings.club_settings_type'] : $this->services['gyman.settings.club_settings_type'] = new \Gyman\Bundle\SettingsBundle\Form\Type\SettingsType()) && false ?: '_'};
}, 'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType' => function () {
    return ${($_ = isset($this->services['form.type.entity']) ? $this->services['form.type.entity'] : $this->load(__DIR__.'/getForm_Type_EntityService.php')) && false ?: '_'};
}, 'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => function () {
    return ${($_ = isset($this->services['form.type.choice']) ? $this->services['form.type.choice'] : $this->load(__DIR__.'/getForm_Type_ChoiceService.php')) && false ?: '_'};
}, 'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => function () {
    return ${($_ = isset($this->services['form.type.form']) ? $this->services['form.type.form'] : $this->load(__DIR__.'/getForm_Type_FormService.php')) && false ?: '_'};
})), array('Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => new RewindableGenerator(function () {
    yield 0 => ${($_ = isset($this->services['form.type_extension.form.http_foundation']) ? $this->services['form.type_extension.form.http_foundation'] : $this->load(__DIR__.'/getForm_TypeExtension_Form_HttpFoundationService.php')) && false ?: '_'};
    yield 1 => ${($_ = isset($this->services['form.type_extension.form.validator']) ? $this->services['form.type_extension.form.validator'] : $this->load(__DIR__.'/getForm_TypeExtension_Form_ValidatorService.php')) && false ?: '_'};
    yield 2 => ${($_ = isset($this->services['form.type_extension.upload.validator']) ? $this->services['form.type_extension.upload.validator'] : $this->load(__DIR__.'/getForm_TypeExtension_Upload_ValidatorService.php')) && false ?: '_'};
    yield 3 => ${($_ = isset($this->services['form.type_extension.csrf']) ? $this->services['form.type_extension.csrf'] : $this->load(__DIR__.'/getForm_TypeExtension_CsrfService.php')) && false ?: '_'};
    yield 4 => ${($_ = isset($this->services['form.type_extension.form.data_collector']) ? $this->services['form.type_extension.form.data_collector'] : $this->load(__DIR__.'/getForm_TypeExtension_Form_DataCollectorService.php')) && false ?: '_'};
}, 5), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\RepeatedType' => new RewindableGenerator(function () {
    yield 0 => ${($_ = isset($this->services['form.type_extension.repeated.validator']) ? $this->services['form.type_extension.repeated.validator'] : $this->services['form.type_extension.repeated.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension()) && false ?: '_'};
}, 1), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType' => new RewindableGenerator(function () {
    yield 0 => ${($_ = isset($this->services['form.type_extension.submit.validator']) ? $this->services['form.type_extension.submit.validator'] : $this->services['form.type_extension.submit.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension()) && false ?: '_'};
}, 1)), new RewindableGenerator(function () {
    yield 0 => ${($_ = isset($this->services['form.type_guesser.validator']) ? $this->services['form.type_guesser.validator'] : $this->load(__DIR__.'/getForm_TypeGuesser_ValidatorService.php')) && false ?: '_'};
    yield 1 => ${($_ = isset($this->services['form.type_guesser.doctrine']) ? $this->services['form.type_guesser.doctrine'] : $this->load(__DIR__.'/getForm_TypeGuesser_DoctrineService.php')) && false ?: '_'};
}, 2), NULL)), ${($_ = isset($this->services['form.resolved_type_factory']) ? $this->services['form.resolved_type_factory'] : $this->load(__DIR__.'/getForm_ResolvedTypeFactoryService.php')) && false ?: '_'});
