<?php

namespace Proxies\__CG__\Gyman\Domain\Calendar;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Event extends \Gyman\Domain\Calendar\Event implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'eventId', 'calendar', 'type', 'duration', 'occurrences', 'eventData', 'deletedAt'];
        }

        return ['__isInitialized__', 'id', 'eventId', 'calendar', 'type', 'duration', 'occurrences', 'eventData', 'deletedAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Event $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function occurrences(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'occurrences', []);

        return parent::occurrences();
    }

    /**
     * {@inheritDoc}
     */
    public function title(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'title', []);

        return parent::title();
    }

    /**
     * {@inheritDoc}
     */
    public function type(): \Dende\Calendar\Domain\Calendar\Event\EventType
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'type', []);

        return parent::type();
    }

    /**
     * {@inheritDoc}
     */
    public function repetitions(): \Dende\Calendar\Domain\Calendar\Event\Repetitions
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'repetitions', []);

        return parent::repetitions();
    }

    /**
     * {@inheritDoc}
     */
    public function duration(): \Dende\Calendar\Domain\Calendar\Event\Duration
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'duration', []);

        return parent::duration();
    }

    /**
     * {@inheritDoc}
     */
    public function startDate(): \DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'startDate', []);

        return parent::startDate();
    }

    /**
     * {@inheritDoc}
     */
    public function endDate(): \DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'endDate', []);

        return parent::endDate();
    }

    /**
     * {@inheritDoc}
     */
    public function move(\DateTime $startDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'move', [$startDate]);

        return parent::move($startDate);
    }

    /**
     * {@inheritDoc}
     */
    public function isSingle(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isSingle', []);

        return parent::isSingle();
    }

    /**
     * {@inheritDoc}
     */
    public function isWeekly(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isWeekly', []);

        return parent::isWeekly();
    }

    /**
     * {@inheritDoc}
     */
    public function closeAtDate(\DateTime $date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'closeAtDate', [$date]);

        return parent::closeAtDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function resize(\DateTime $newStartDate = NULL, \DateTime $newEndDate = NULL, \Dende\Calendar\Domain\Calendar\Event\Repetitions $repetitions = NULL, \Dende\Calendar\Domain\Calendar\Event\OccurrenceInterface $occurrence = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'resize', [$newStartDate, $newEndDate, $repetitions, $occurrence]);

        return parent::resize($newStartDate, $newEndDate, $repetitions, $occurrence);
    }

    /**
     * {@inheritDoc}
     */
    public function getOccurrenceById(\Dende\Calendar\Domain\IdInterface $occurrenceId): \Dende\Calendar\Domain\Calendar\Event\OccurrenceInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOccurrenceById', [$occurrenceId]);

        return parent::getOccurrenceById($occurrenceId);
    }

    /**
     * {@inheritDoc}
     */
    public function id(): \Dende\Calendar\Domain\IdInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'id', []);

        return parent::id();
    }

    /**
     * {@inheritDoc}
     */
    public function calendar(): \Dende\Calendar\Domain\Calendar
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'calendar', []);

        return parent::calendar();
    }

    /**
     * {@inheritDoc}
     */
    public function dumpDatesAsString(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'dumpDatesAsString', []);

        return parent::dumpDatesAsString();
    }

    /**
     * {@inheritDoc}
     */
    public function dumpOccurrencesDatesAsString(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'dumpOccurrencesDatesAsString', []);

        return parent::dumpOccurrencesDatesAsString();
    }

    /**
     * {@inheritDoc}
     */
    public function findPivotDate(\Dende\Calendar\Domain\Calendar\Event\OccurrenceInterface $editedOccurrence): \DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'findPivotDate', [$editedOccurrence]);

        return parent::findPivotDate($editedOccurrence);
    }

    /**
     * {@inheritDoc}
     */
    public function update(\Dende\Calendar\Domain\Calendar\Event\EventData $data)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'update', [$data]);

        return parent::update($data);
    }

    /**
     * {@inheritDoc}
     */
    public function setDeletedAt(\DateTime $deletedAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDeletedAt', [$deletedAt]);

        return parent::setDeletedAt($deletedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getDeletedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDeletedAt', []);

        return parent::getDeletedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function isDeleted(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isDeleted', []);

        return parent::isDeleted();
    }

}
