<?php

namespace Proxies\__CG__\Gyman\Domain;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Voucher extends \Gyman\Domain\Voucher implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'startDate', 'endDate', 'maximumAmount', 'price', 'id', 'member', 'entries', 'createdAt', 'updatedAt', 'deletedAt', 'closedAt'];
        }

        return ['__isInitialized__', 'startDate', 'endDate', 'maximumAmount', 'price', 'id', 'member', 'entries', 'createdAt', 'updatedAt', 'deletedAt', 'closedAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Voucher $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function addEntry(\Gyman\Domain\Entry $entry)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addEntry', [$entry]);

        return parent::addEntry($entry);
    }

    /**
     * {@inheritDoc}
     */
    public function lastEntry()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'lastEntry', []);

        return parent::lastEntry();
    }

    /**
     * {@inheritDoc}
     */
    public function close(\DateTime $date = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'close', [$date]);

        return parent::close($date);
    }

    /**
     * {@inheritDoc}
     */
    public function startDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'startDate', []);

        return parent::startDate();
    }

    /**
     * {@inheritDoc}
     */
    public function endDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'endDate', []);

        return parent::endDate();
    }

    /**
     * {@inheritDoc}
     */
    public function maximumAmount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'maximumAmount', []);

        return parent::maximumAmount();
    }

    /**
     * {@inheritDoc}
     */
    public function price()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'price', []);

        return parent::price();
    }

    /**
     * {@inheritDoc}
     */
    public function entries()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'entries', []);

        return parent::entries();
    }

    /**
     * {@inheritDoc}
     */
    public function leftEntriesAmount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'leftEntriesAmount', []);

        return parent::leftEntriesAmount();
    }

    /**
     * {@inheritDoc}
     */
    public function usedEntriesAmount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'usedEntriesAmount', []);

        return parent::usedEntriesAmount();
    }

    /**
     * {@inheritDoc}
     */
    public function leftDaysAmount($relatedTo = 'now')
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'leftDaysAmount', [$relatedTo]);

        return parent::leftDaysAmount($relatedTo);
    }

    /**
     * {@inheritDoc}
     */
    public function totalDaysAmount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'totalDaysAmount', []);

        return parent::totalDaysAmount();
    }

    /**
     * {@inheritDoc}
     */
    public function passedDaysAmount($relatedTo = 'now')
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'passedDaysAmount', [$relatedTo]);

        return parent::passedDaysAmount($relatedTo);
    }

    /**
     * {@inheritDoc}
     */
    public function isUnlimited()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isUnlimited', []);

        return parent::isUnlimited();
    }

    /**
     * {@inheritDoc}
     */
    public function overlaps(\Gyman\Domain\Voucher $voucher)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'overlaps', [$voucher]);

        return parent::overlaps($voucher);
    }

    /**
     * {@inheritDoc}
     */
    public function member()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'member', []);

        return parent::member();
    }

    /**
     * {@inheritDoc}
     */
    public function setMember(\Gyman\Domain\Member $member)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMember', [$member]);

        return parent::setMember($member);
    }

    /**
     * {@inheritDoc}
     */
    public function id()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'id', []);

        return parent::id();
    }

    /**
     * {@inheritDoc}
     */
    public function removeEntry(\Gyman\Domain\Entry $entry)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeEntry', [$entry]);

        return parent::removeEntry($entry);
    }

    /**
     * {@inheritDoc}
     */
    public function createdAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'createdAt', []);

        return parent::createdAt();
    }

    /**
     * {@inheritDoc}
     */
    public function isClosed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isClosed', []);

        return parent::isClosed();
    }

    /**
     * {@inheritDoc}
     */
    public function closedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'closedAt', []);

        return parent::closedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function isCurrent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isCurrent', []);

        return parent::isCurrent();
    }

    /**
     * {@inheritDoc}
     */
    public function updateWithCommand(\Gyman\Application\Command\UpdateVoucherCommand $updateVoucherCommand)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'updateWithCommand', [$updateVoucherCommand]);

        return parent::updateWithCommand($updateVoucherCommand);
    }

}
