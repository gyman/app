<?php

namespace Proxies\__CG__\Gyman\Domain\Calendar\Event;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Occurrence extends \Gyman\Domain\Calendar\Event\Occurrence implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'instructor', 'instructorId', 'subject', 'note', 'entries', 'id', 'occurrenceData', 'modified', 'event'];
        }

        return ['__isInitialized__', 'instructor', 'instructorId', 'subject', 'note', 'entries', 'id', 'occurrenceData', 'modified', 'event'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Occurrence $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function instructor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'instructor', []);

        return parent::instructor();
    }

    /**
     * {@inheritDoc}
     */
    public function subject()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'subject', []);

        return parent::subject();
    }

    /**
     * {@inheritDoc}
     */
    public function note()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'note', []);

        return parent::note();
    }

    /**
     * {@inheritDoc}
     */
    public function setInstructor(\Gyman\Domain\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInstructor', [$user]);

        return parent::setInstructor($user);
    }

    /**
     * {@inheritDoc}
     */
    public function instructorId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'instructorId', []);

        return parent::instructorId();
    }

    /**
     * {@inheritDoc}
     */
    public function entries(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'entries', []);

        return parent::entries();
    }

    /**
     * {@inheritDoc}
     */
    public function update(\Dende\Calendar\Domain\Calendar\Event\Occurrence\OccurrenceData $data)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'update', [$data]);

        return parent::update($data);
    }

    /**
     * {@inheritDoc}
     */
    public function resize(\Dende\Calendar\Domain\Calendar\Event\DurationInterface $newDuration)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'resize', [$newDuration]);

        return parent::resize($newDuration);
    }

    /**
     * {@inheritDoc}
     */
    public function move(\DateTime $startDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'move', [$startDate]);

        return parent::move($startDate);
    }

    /**
     * {@inheritDoc}
     */
    public function isOngoing(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isOngoing', []);

        return parent::isOngoing();
    }

    /**
     * {@inheritDoc}
     */
    public function isPast(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isPast', []);

        return parent::isPast();
    }

    /**
     * {@inheritDoc}
     */
    public function startDate(): \DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'startDate', []);

        return parent::startDate();
    }

    /**
     * {@inheritDoc}
     */
    public function duration(): \Dende\Calendar\Domain\Calendar\Event\DurationInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'duration', []);

        return parent::duration();
    }

    /**
     * {@inheritDoc}
     */
    public function endDate(): \DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'endDate', []);

        return parent::endDate();
    }

    /**
     * {@inheritDoc}
     */
    public function id(): \Ramsey\Uuid\UuidInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'id', []);

        return parent::id();
    }

    /**
     * {@inheritDoc}
     */
    public function isModified(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isModified', []);

        return parent::isModified();
    }

    /**
     * {@inheritDoc}
     */
    public function synchronizeWithEvent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'synchronizeWithEvent', []);

        return parent::synchronizeWithEvent();
    }

    /**
     * {@inheritDoc}
     */
    public function event(): \Dende\Calendar\Domain\Calendar\Event
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'event', []);

        return parent::event();
    }

    /**
     * {@inheritDoc}
     */
    public function dumpDatesAsString(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'dumpDatesAsString', []);

        return parent::dumpDatesAsString();
    }

}
