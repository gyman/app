<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'twig' shared service.

$this->services['twig'] = $instance = new \Twig\Environment(${($_ = isset($this->services['twig.loader']) ? $this->services['twig.loader'] : $this->load(__DIR__.'/getTwig_LoaderService.php')) && false ?: '_'}, array('form_themes' => $this->parameters['twig.form.resources'], 'debug' => false, 'strict_variables' => false, 'exception_controller' => 'twig.controller.exception:showAction', 'autoescape' => 'name', 'cache' => ($this->targetDirs[0].'/twig'), 'charset' => 'UTF-8', 'default_path' => '/vagrant/templates', 'paths' => array(), 'date' => array('format' => 'F j, Y H:i', 'interval_format' => '%d days', 'timezone' => NULL), 'number_format' => array('decimals' => 0, 'decimal_point' => '.', 'thousands_separator' => ',')));

$a = ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack()) && false ?: '_'};
$b = ${($_ = isset($this->services['knp_menu.matcher']) ? $this->services['knp_menu.matcher'] : $this->load(__DIR__.'/getKnpMenu_MatcherService.php')) && false ?: '_'};

$c = new \Knp\Menu\Util\MenuManipulator();

$d = new \Symfony\Bridge\Twig\AppVariable();
$d->setEnvironment('prod');
$d->setDebug(false);
if ($this->has('security.token_storage')) {
    $d->setTokenStorage(${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->services['security.token_storage'] = new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage()) && false ?: '_'});
}
if ($this->has('request_stack')) {
    $d->setRequestStack($a);
}

$instance->addExtension(new \Symfony\Bridge\Twig\Extension\LogoutUrlExtension(${($_ = isset($this->services['security.logout_url_generator']) ? $this->services['security.logout_url_generator'] : $this->getSecurity_LogoutUrlGeneratorService()) && false ?: '_'}));
$instance->addExtension(new \Symfony\Bridge\Twig\Extension\SecurityExtension(${($_ = isset($this->services['security.authorization_checker']) ? $this->services['security.authorization_checker'] : $this->getSecurity_AuthorizationCheckerService()) && false ?: '_'}));
$instance->addExtension(new \Symfony\Bridge\Twig\Extension\TranslationExtension(${($_ = isset($this->services['translator.default']) ? $this->services['translator.default'] : $this->getTranslator_DefaultService()) && false ?: '_'}));
$instance->addExtension(new \Symfony\Bridge\Twig\Extension\AssetExtension(${($_ = isset($this->services['assets.packages']) ? $this->services['assets.packages'] : $this->load(__DIR__.'/getAssets_PackagesService.php')) && false ?: '_'}));
$instance->addExtension(new \Symfony\Bridge\Twig\Extension\CodeExtension(${($_ = isset($this->services['debug.file_link_formatter']) ? $this->services['debug.file_link_formatter'] : $this->getDebug_FileLinkFormatterService()) && false ?: '_'}, '/vagrant/app', 'UTF-8'));
$instance->addExtension(new \Symfony\Bridge\Twig\Extension\RoutingExtension(${($_ = isset($this->services['router']) ? $this->services['router'] : $this->getRouterService()) && false ?: '_'}));
$instance->addExtension(new \Symfony\Bridge\Twig\Extension\YamlExtension());
$instance->addExtension(new \Symfony\Bridge\Twig\Extension\StopwatchExtension(${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : $this->services['debug.stopwatch'] = new \Symfony\Component\Stopwatch\Stopwatch(true)) && false ?: '_'}, false));
$instance->addExtension(new \Symfony\Bridge\Twig\Extension\ExpressionExtension());
$instance->addExtension(new \Symfony\Bridge\Twig\Extension\HttpKernelExtension());
$instance->addExtension(new \Symfony\Bridge\Twig\Extension\HttpFoundationExtension($a, ${($_ = isset($this->services['router.request_context']) ? $this->services['router.request_context'] : $this->getRouter_RequestContextService()) && false ?: '_'}));
$instance->addExtension(new \Symfony\Bridge\Twig\Extension\FormExtension(array(0 => $this, 1 => 'twig.form.renderer')));
$instance->addExtension(new \Symfony\Bridge\Twig\Extension\WebLinkExtension($a));
$instance->addExtension(new \Knp\Menu\Twig\MenuExtension(new \Knp\Menu\Twig\Helper(${($_ = isset($this->services['knp_menu.renderer_provider']) ? $this->services['knp_menu.renderer_provider'] : $this->load(__DIR__.'/getKnpMenu_RendererProviderService.php')) && false ?: '_'}, ${($_ = isset($this->services['knp_menu.menu_provider']) ? $this->services['knp_menu.menu_provider'] : $this->load(__DIR__.'/getKnpMenu_MenuProviderService.php')) && false ?: '_'}, $c, $b), $b, $c));
$instance->addExtension(new \Knp\Bundle\TimeBundle\Twig\Extension\TimeExtension(${($_ = isset($this->services['time.templating.helper.time']) ? $this->services['time.templating.helper.time'] : $this->load(__DIR__.'/getTime_Templating_Helper_TimeService.php')) && false ?: '_'}));
$instance->addExtension(new \Doctrine\Bundle\DoctrineBundle\Twig\DoctrineExtension());
$instance->addExtension(${($_ = isset($this->services['ob_highcharts.twig.highcharts_extension']) ? $this->services['ob_highcharts.twig.highcharts_extension'] : $this->services['ob_highcharts.twig.highcharts_extension'] = new \Ob\HighchartsBundle\Twig\HighchartsExtension()) && false ?: '_'});
$instance->addExtension(${($_ = isset($this->services['gyman.twig.voucher_extension']) ? $this->services['gyman.twig.voucher_extension'] : $this->load(__DIR__.'/getGyman_Twig_VoucherExtensionService.php')) && false ?: '_'});
$instance->addExtension(${($_ = isset($this->services['gyman.app.twig.entries_extension']) ? $this->services['gyman.app.twig.entries_extension'] : $this->services['gyman.app.twig.entries_extension'] = new \Gyman\Bundle\AppBundle\Twig\EntriesExtension()) && false ?: '_'});
$instance->addExtension(${($_ = isset($this->services['gyman.app.twig.avatar']) ? $this->services['gyman.app.twig.avatar'] : $this->load(__DIR__.'/getGyman_App_Twig_AvatarService.php')) && false ?: '_'});
$instance->addGlobal('app', $d);
$instance->addRuntimeLoader(new \Twig\RuntimeLoader\ContainerRuntimeLoader(new \Symfony\Component\DependencyInjection\ServiceLocator(array('Symfony\\Bridge\\Twig\\Extension\\HttpKernelRuntime' => function () {
    return ${($_ = isset($this->services['twig.runtime.httpkernel']) ? $this->services['twig.runtime.httpkernel'] : $this->load(__DIR__.'/getTwig_Runtime_HttpkernelService.php')) && false ?: '_'};
}, 'Symfony\\Component\\Form\\FormRenderer' => function () {
    return ${($_ = isset($this->services['twig.form.renderer']) ? $this->services['twig.form.renderer'] : $this->load(__DIR__.'/getTwig_Form_RendererService.php')) && false ?: '_'};
}))));
$instance->addGlobal('sentry_url', 'http://57c1dbc134824f4b99194c46a912c7fe:053224cf7c53440b80d71dd0017075ad@sentry.dev.gyman.pl/6');
$instance->addGlobal('gallery_dir', '/uploads/gallery/');
$instance->addGlobal('google_maps_api_key', NULL);
$instance->addGlobal('baseUrl', 'gyman.vagrant');
(new \Symfony\Bundle\TwigBundle\DependencyInjection\Configurator\EnvironmentConfigurator('F j, Y H:i', '%d days', NULL, 0, '.', ','))->configure($instance);

return $instance;
