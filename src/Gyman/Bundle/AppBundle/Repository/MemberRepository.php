<?php
namespace Gyman\Bundle\AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Gyman\Bundle\UserBundle\Entity\User;
use Gyman\Application\Command\SearchMemberCommand;
use Gyman\Domain\Member;
use Gyman\Domain\Member\Details\Barcode;
use Gyman\Domain\Member\EmailAddress;
use Gyman\Application\Repository\MemberRepositoryInterface;

/**
 * MemberRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * voucherRepository methods below.
 */
class MemberRepository extends EntityRepository implements MemberRepositoryInterface
{
    /**
     * @param EmailAddress $email
     * @return Member
     */
    public function findOneByEmailAddress(EmailAddress $emailAddress)
    {
        $qb = $this->createQueryBuilder('m');

        $query = $qb->where('m.email.email = :emailAddress')
            ->setParameter('emailAddress', $emailAddress->email())
            ->getQuery();

        return $query->getOneOrNullResult();
    }

    /**
     * @param Barcode $barcode
     * @throws \Doctrine\ORM\NonUniqueResultException
     * @return Member
     * @internal param Barcode $barcode
     */
    public function findOneByBarcode(Barcode $barcode)
    {
        $qb = $this->createQueryBuilder('m');

        $query = $qb->where('m.details.barcode.barcode = :barcode')
            ->setParameter('barcode', $barcode->barcode())
            ->getQuery();

        return $query->getOneOrNullResult();
    }

    /**
     * @param Member $member
     * @return mixed
     */
    public function remove($member)
    {
        $this->getEntityManager()->remove($member);
        $this->getEntityManager()->flush();
    }

    /**
     * @param Member $member
     * @return null
     */
    public function insert($member)
    {
        $this->getEntityManager()->persist($member);
        $this->getEntityManager()->flush();
    }

    /**
     * Get all Members query
     * @return Doctrine\ORM\QueryBuilder
     */
    public function getQuery()
    {
        $query = $this->createQueryBuilder('m');

        return $query;
    }

    public function getDashboardSearchQueryBuilder()
    {
        return $this->createQueryBuilder('m');
    }

    public function getTotalCount()
    {
        $query = $this->getQuery();
        $query->select('count(m.id)');

        return $query->getQuery()->getSingleScalarResult();
    }

    public function getPaginator(QueryBuilder $query)
    {
        return new Paginator($query);
    }

    /**
     * @param QueryBuilder $query
     */
    public function setActiveCriteria(QueryBuilder $query)
    {
        $query->andWhere('m.deletedAt is null');
    }

    /**
     * @param  QueryBuilder $queryBuilder
     * @param  User         $user
     * @return QueryBuilder
     */
    public function getMembersForUser(QueryBuilder $queryBuilder, User $user)
    {
        $queryBuilder->innerJoin('m.sections', 's');
        $queryBuilder->innerJoin('s.club', 'c');
        $queryBuilder->andWhere(':user MEMBER OF c.owners');
        $queryBuilder->setParameter('user', $user);

        return $queryBuilder;
    }

    /**
     * @param string $query
     */
    public function search(SearchMemberCommand $command)
    {
        $qb = $this->createQueryBuilder('m');
        $expr = $qb->expr();

        if (!is_null($command->query)) {
            $qb->andWhere('m.details.firstname LIKE :queryLike')
                ->orWhere('m.details.lastname LIKE :queryLike')
                ->orWhere('LOWER(m.details.barcode.barcode) = :query')
                ->orWhere('LOWER(m.email.email) = :query')
                ->setParameter('queryLike', '%' . strtolower($command->query) . '%')
                ->setParameter('query', strtolower($command->query));
        }

        if (!is_null($command->section)) {
            $qb->join("m.sections", "s")
                ->andWhere("s.id = :section")
                ->setParameter('section', $command->section->id())
            ;
        }

        if (!is_null($command->hasOpenedEntry)) {
            $qb->join("m.lastEntry", "e");
            $column = "e.endDate";
            $qb->andWhere($expr->andX(
                boolval($command->hasOpenedEntry) ? $expr->isNull($column) : $expr->isNotNull($column)
            ));
        }

        if (!is_null($command->hasVoucher)) {
            $qb->andWhere(
                boolval($command->hasVoucher) ? $expr->isNotNull("m.currentVoucher") : $expr->isNull("m.currentVoucher")
            );
        }

        if (!is_null($command->starred)) {
            $qb->andWhere(
                $expr->eq("m.details.starred", true)
            );
        }

        if (!is_null($command->belt)) {
            $qb->andWhere("m.details.belt.color = :color")
                ->setParameter("color", $command->belt)
            ;
        }


        $query = $qb->getQuery();
        return $query->getResult();
    }

    /**
     * @param Member $member
     */
    public function save(Member $member){
        $em = $this->getEntityManager();
        $em->persist($member);
        $em->flush($member);
    }
}
