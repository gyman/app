<?php

namespace Gyman\Bundle\EntriesBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Gyman\Bundle\ListsBundle\Entity\RepositoryListCompatible;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;
use DateTime;

/**
 * EntryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EntryRepository extends EntityRepository implements RepositoryListCompatible
{
    public function getAllEntries()
    {
        return $this->createQueryBuilder("e")
                        ->getQuery()->execute();
    }

    /**
     *
     * @return QueryBuilder
     */
    public function getQuery()
    {
        return $this->createQueryBuilder("e");
    }

    public function getTotalCount()
    {
        $query = $this->getQuery();
        $query->select("count(e.id)");

        return $query->getQuery()->getSingleScalarResult();
    }

    public function getPaginator(QueryBuilder $query)
    {
        return new Paginator($query);
    }

    /**
     *
     * @return QueryBuilder
     */
    public function getCountByActivitiesQueryBuilder(DateTime $startDate, DateTime $endDate)
    {
        return $this->createQueryBuilder("e")
                        ->select([
                            "a.name",
                            "SUBSTRING(o.startDate,1,10) as date",
                            "count(e) as cnt"
                        ])
                        ->join("e.occurence", "o")
                        ->join("o.event", "ev")
                        ->join("ev.activity", "a")
                        ->groupBy("date, a.name")
                        ->where("e.startDate > :start")
                        ->andWhere("e.endDate < :end or e.endDate is null")
                        ->setParameters([
                            "start" => $startDate,
                            "end"   => $endDate,
        ]);
    }

    public function getCountByActivities(DateTime $startDate, DateTime $endDate)
    {
        $query = $this->getCountByActivitiesQueryBuilder($startDate, $endDate);

        return $query->getQuery()->execute();
    }
}
