<?php

namespace Dende\ScheduleBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use Doctrine\ORM\Query\Expr\Join;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends EntityRepository {

    /**
     * 
     * @param int $timeOffsetInMinutes
     * @return DoctrineCollection
     */
    public function getCurrentEvents($timeOffsetInMinutes = null) {
        $dayOfWeek = strtolower(date('l'));

        if ($timeOffsetInMinutes)
        {
            $hour = date('H:i', strtotime(sprintf("+%d minutes", $timeOffsetInMinutes)));
        }
        else
        {
            $hour = date('H:i');
        }

        $queryBuilder = $this->createQueryBuilder("e")
                ->where("e.dayOfWeek = :day")
                ->andWhere("e.startHour <= :hour")
                ->andWhere("e.endHour >= :hour")
                ->setParameters(array(
            "day"  => $dayOfWeek,
            "hour" => $hour
        ));

        $query = $queryBuilder->getQuery();

        return $query->execute();
    }

    public function getAllEvents() {
        $queryBuilder = $this->createQueryBuilder("e");

        $query = $queryBuilder->getQuery();

        return $query->execute();
    }

    /**
     * 
     * @param integer $weekNumber
     * @return type
     */
    public function getAllEventsForWeek($year, $weekNumber) {
        $weekStart = new \DateTime(sprintf("%d-W%02d-1", $year, $weekNumber));
        $weekEnd = new \DateTime(sprintf("%d-W%02d-0 23:59:59", $year, $weekNumber + 1));

        $qb = $this->createQueryBuilder("e");
        $exp = $qb->expr();

        $qb->select("e", "a HIDDEN", "o HIDDEN")
                ->leftJoin("e.activity", "a")
                ->leftJoin("e.occurences", "o", Join::WITH, $exp->andX(
                                $exp->eq("e.id", "o.event"), $exp->between("o.startDate", ":weekStart", ":weekEnd")
                ))
                ->where(
                        $exp->orX(
                                $exp->andX(
                                        $exp->lte("e.startDate", ":weekEnd"), $exp->isNull("e.endDate")
                                ), $exp->andX(
                                        $exp->lte("e.startDate", ":weekEnd"), $exp->gte("e.endDate", ":weekStart")
                                )
                        )
                )
                ->setParameters([
                    "weekStart" => $weekStart,
                    "weekEnd"   => $weekEnd
                ])
        ;
        $query = $qb->getQuery();

        return $query->execute();
    }

    public function getTodayEvents() {
        $now = new \DateTime();
        $query = $this->getEventsForDateQuery($now);

        return $query->execute();
    }

    public function getEventsForDateArray(\DateTime $date) {
        $query = $this->getEventsForDateQuery($date);
        return $query->execute([]);
    }

    public function getEventsForDate(\DateTime $date) {
        $queryBuilder = $this->createQueryBuilder("e");
        $queryBuilder
                ->join("e.activity", "a")
                ->where("e.dayOfWeek = :day")
                ->setParameter("day", strtolower($date->format("l")));
        $query = $queryBuilder->getQuery();

        return $query->execute();
    }

    /**
     * 
     * @param \DateTime $date
     * @return QueryBuilder
     */
    private function getEventsForDateQuery(\DateTime $date) {
        $queryBuilder = $this->createQueryBuilder("e");
        $queryBuilder
                ->select("e.id, e.startHour, e.endHour, a.name")
                ->join("e.activity", "a")
                ->where("e.dayOfWeek = :day")
                ->setParameter("day", strtolower($date->format("l")));
        $query = $queryBuilder->getQuery();

        return $query;
    }

}
